from optimization.metric_functions import combined_score

class AgentEvaluator:
    """
    Evaluator for DSPy agent outputs using custom metric functions.
    """

    def __init__(self, keywords_for_evaluation):
        """
        :param keywords_for_evaluation: List[str] keywords expected in good output
        """
        self.keywords = keywords_for_evaluation

    def evaluate_text(self, output_text):
        """
        Evaluate a text output using combined_score metric.
        :param output_text: str, text generated by an agent
        :return: float, score between 0 and 1
        """
        score = combined_score(output_text, self.keywords)
        return score

    def evaluate_email(self, email_text):
        """
        Example: evaluate email text specifically (could add more email-specific logic).
        """
        # Example keywords for good emails
        email_keywords = ["candidate", "next steps", "interview", "thank you", "available"]
        score = combined_score(email_text, email_keywords)
        return score


if __name__ == "__main__":
    # Example usage
    sample_text = ("The candidate shows excellent skills in Python and communication. "
                   "We recommend scheduling an interview next week.")

    keywords = ["skills", "recommend", "interview", "communication"]

    evaluator = AgentEvaluator(keywords)
    score = evaluator.evaluate_text(sample_text)
    print(f"Evaluation score: {score:.2f}")

    sample_email = "Thank you for your interest. The candidate is available for an interview next Monday."
    email_score = evaluator.evaluate_email(sample_email)
    print(f"Email evaluation score: {email_score:.2f}")
